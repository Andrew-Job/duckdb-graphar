name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, edited, synchronize]
  workflow_dispatch:

jobs:
  pr-title-check:
    name: PR Title Check
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Check PR Title
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request.title;
            const pattern = /(^[mM]erge\s.*$)|(^[rR]evert\s.*$)|(^BREAKING CHANGE:.*$)|(^MINOR\s.*$)|(^(\w+)(?:\(([\w\$\.\-\*\s]+)\))?\:\s(.+)$)/;
            if (!pattern.test(title)) {
              core.setFailed(`PR title "${title}" doesn't match required format. Please use one of:
              - Conventional commit format: "type(scope): description"
              - Merge format: "Merge ..."
              - Revert format: "Revert ..."
              - Breaking change: "BREAKING CHANGE: description"
              - Minor change: "MINOR description"`);
            }

  build:
    name: ${{ matrix.os }} Build and Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            ccache_dir: ~/.ccache
            deps_command: |
              sudo apt-get update -qq
              sudo apt-get install -y --no-install-recommends \
                build-essential \
                cmake \
                curl \
                zlib1g-dev \
                libzstd-dev \
                libsnappy-dev \
                ccache
          - os: macos-latest
            ccache_dir: ~/Library/Caches/ccache
            deps_command: |
              brew update
              brew install cmake zlib zstd snappy ccache
              brew install cmake@3.30.2
              brew link --overwrite cmake@3.30.2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Xcode CLI Tools (macOS)
        if: matrix.os == 'macos-latest'
        run: xcode-select --install || true

      - name: Install Latest clang-format (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "::group::Installing CLang Format"
          sudo apt-get update
          sudo apt-get install clang-format-19
          echo "::endgroup::"

      - name: Check C++ Code Style
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "::group::Checking C++ Code Style"
          find src/ include/ -name '*.cpp' -o -name '*.hpp' | xargs clang-format-19 --dry-run --Werror
          echo "::endgroup::"

      - name: Set up ccache
        run: |
          echo "CCACHE_DIR=${{ matrix.ccache_dir }}" >> $GITHUB_ENV
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "/usr/lib/ccache" >> $GITHUB_PATH
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          fi

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.ccache_dir }}
            build/_deps
          key: ${{ runner.os }}-deps-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install System Dependencies
        run: |
          echo "::group::Installing dependencies"
          ${{ matrix.deps_command }}
          echo "::endgroup::"

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..

      - name: Build
        run: |
          cd build
          make -j$(getconf _NPROCESSORS_ONLN)

      - name: Show Build Summary
        run: |
          echo "Build succeeded on ${{ matrix.os }}"
          ccache -s
